/* eslint-disable consistent-return */
import { Request, Response, NextFunction } from 'express'
import jwt, { VerifyErrors, sign } from 'jsonwebtoken'
import jwtConfig from '../config/jwt'
import { freeAccess } from '@/utils/free-access-auth'
import { IReturnAuthenticate } from '@/@types'

export const middlewareAuthentication = (
  req: Request,
  res: Response,
  next: NextFunction,
): void => {
  if (freeAccess(req.path)) {
    next()
    return
  }

  const authHeader = req.headers.authorization

  if (!authHeader) {
    res.status(401).json({ message: 'Sem autorização' })
    return
  }

  // Bearer lkasdjfksdfaDJKÇLÇLKASDA
  const parts = authHeader.split(' ')

  if (parts.length !== 2) {
    res.status(401).json({ message: 'Token mal formatado' })
    return
  }

  const [schema, token] = parts

  // Verifica se Schema tem a palavra Bearer
  if (!/^Bearer$/i.test(schema)) {
    res.status(401).json({ message: 'Token mal formado' })
    return
  }

  // verifica token
  jwt.verify(
    token,
    jwtConfig.secret,
    (err: VerifyErrors | null, decoded: IReturnAuthenticate): void => {
      if (err) {
        res.status(401).json({ message: 'Token inválido' })
        return
      }

      req.user = decoded

      next()
    },
  )
}